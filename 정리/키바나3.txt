# GET kyo_index/_search?pretty
# GET kyo_index/_mapping?pretty
# 스프링부트 컨트롤러, 서비스

# 쿼리 컨텍스트(query context)
- 검색할 내용이 엘라스틱 일 때 도큐먼트에 엘라스틱이 포함되어 있는 지 검색할 때 사용한다.

# GET 인덱스 이름/_search
# {
#   "query": {
#     "실행할 쿼리 이름": {
#       "필드 이름": "검색어"
#     }
#   }
# }


# 이름중에 '지'가 들어가는 사람 검색
1. 엘라스틱 서치에서 검색 쿼리를 작성
2. match 또는 wildcard 쿼리를 사용하여 검색
3. 결과 반환
# match
- 전문 검색을 위한 쿼리, 역 인덱싱된 용색할 때 사용한다.
*찾을단어*
GET kyo_index/_search
{
   "query" : {
      "wildcard" : {
         "name" : "*지*"
      }
   }
}

# 취미가 골프인 사람들 검색 
GET kyo_index/_search
{
  "query": {
     "match": {
       "hobby": "골프"
     }
   }
}

# 주소에 서울 사람들 검색 
GET kyo_index/_search
{
  "query": {
     "match": {
       "address": "서울"
     }
   }
}

# 주소에 강북이 포함된 사람들을 검색
GET kyo_index/_search
{
  "query": {
     "wildcard": {
       "address": "*강북*"
     }
   }
}

# 실제 홈에서 샘플 데이터를 추가할 수 있다.
# 현재 추가한 이커머스 데이터를 조회
# 인덱스 매핑 보기
GET _cat/indices?v



GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "category": "Clothing"
    }
  }
}


# 필터 컨텍스트
- 점수 계산은 하지 않고 데이터가 일치하는지만 확인해서 검색하는 것!
- bool은 논리 쿼리로 내부 필터를 적용한다.
# GET 인덱스 이름/_search
# {
#   "query": {
#     "실행할 쿼리 이름": {
#       "filter": [
#         {
#           "필터에 사용할 쿼리 이름": {
#             "필드 이름": "검색어"
#           }
#         }
#       ]
#     }
#   }
# }

# 고객의 성별이 남성인 주문을 검색하는 필터
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "customer_gender": "MALE"
          }
        }
      ]
    }
  }
}


# 주문한 요일(day_of_week)이 월요일인 주문을 검색하는 필터
GET kibana_sample_data_ecommerce/_search
{
  "query": {  #데이터를 검색하는 조건 지정
    "bool": { #어떤 조건
      "filter": [  #조건에 맞는 데이터 거르기
        {
          "term": { # 정확한 값을 가진 데이터만 찾기
            "day_of_week": "Monday"
          }
        }
      ]
    }
  }
}


# 제품의 카테고리가 'Women's Clothing' 여성 의류인 주문을 검색하는 필터
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
	"category" : "Women's Clothing"
          }
        }
      ]
    }
  }
}

# 주문한 통화 화폐(currency) EUR로 거래 주문된 사람들 검색!


# 가격이 50이하인 데이터를 검색
GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "products.price": {
              "lte": 50
            }
          }
        }
      ]
    }
  }
}
# range 범위를 지정해서 데이터를 검색하는 필터링
# 범위 쿼리 연산자(비교연산자)
- 크거나 같다 gte(greater than or equal)
- 초과 gt(greater than)
- 미만 lt(less than)
- 이하 lte(less than or equal)

# 쿼리
# 검색을 할 때 쿼리를 지원하고 크게 두가지 쿼리로 나뉜다
# 리프쿼리(leaf query)
- 특정 필드에서 용어를 찾는 쿼리 match, term, range
- match query : 단어를 전문 검색
# 복합쿼리(compound query)
- 쿼리를 조합해서 사용하는 쿼리로 bool

# 전문 쿼리는 전문 검색을 하기 위해서 사용되며, text 타입으로 매핑을 해야한다.

# _source 파라미터는 특정 원하는 필드만 보고싶을 경우 
   [필드명, 필드명 , ,] 안에 보고 싶은 필드를 지정하면 된다.
   생략시에는 인덱스 전체 필드를 가지고 온다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "email", "customer_gender"],
  "query": {
    "match": {
      "customer_full_name" : "Mary"
    }
  }
}

   
# 여러개의 용어를 전문 검색을 하는 match query
# 검색할 필드에 "Mary Eddie"와 같이 검색어를 띄어쓰기를 경계로 나열 되며 or 연산으로 인식한다
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "email", "customer_gender"],
  "query": {
    "match": {
      "customer_full_name" : "Mary Eddie"
    }
  }
}

# and 연산을 하려면 파라미터를 사용해서 and 연산인 것을 알려줘야된다.
# or 원래 단어를 쪼개서 (토큰) 검색을 하기 때문에 자동으로 or 연산이 기본값으로 사용된다.
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_full_name", "email", "customer_gender"],
  "query": {
    "match": {
      "customer_full_name" : {
        "query": "Eddie Riley",
        "operator" : "and"
      }
    }
  }
}



# multi_match query
#  - 검색을 할 때 파라미터에 match가 들어가면 text타입으로
#     매핑된 필드에서 사용해야한다.
#  - term 같은 경우에는 대소문자를 구별하는 keyword타입으로 
#    되어있어서 정확하게 대소문자도 일치해야 검색이 가능하다.
#  - 위에 내용들은 데이터를 검색할 필드의 이름을 1개만 작성해야된다.
#  - 만약 여러개의 필드에서 검색을 하려고하면 multi_match query
#    를 이용해서 검색 가능하다. 

# GET kibana_sample_data_ecommerce/_search
# {
#   "query": {
#     "multi_match": {
#       "query": "검색할 용어",
#       "fields": ["검색할 용어가 있을것으로 예상되는 필드", ...]
#     }
#   }
# }

# "query" 파라미터에 검색할 단어를 입력한다.
# "fields" 파라미터의 [] 내부에 검색할 단어가 있을 것을 예상하는 필드 목록을 작성
GET kibana_sample_data_ecommerce/_search
{
  "_source": ["customer_first_name", "customer_last_name", "customer_full_name"],
  
  "query": {
    "multi_match": {
      "query": "Underwood",
      "fields": ["customer_full_name", "email", "customer_gender"]
    }
  }
}


# 와일드 카드 문자를 이용한 multi_match query
# "_source" 파라미터나 "multi_match"의 "fields" 파라미터는 
   [] 안에 여러개의 필드 이름을 "," 구분해서 나열하는 경우
   와일드 카드 문자를 이용하면 []를 사용하지 않아도 여러개를 검색 가능

# customer_* : customer_로 시작하는
# *_name : _name으로 끝나는
# *_full_* : _full_을 포함하는

# customer_*_name : customer_로 시작하고 _name으로 끝나는
GET kibana_sample_data_ecommerce/_search
{
  "_source":"customer_*_name",
  
  "query": {
    "multi_match": {
      "query": "Underwood",
      "fields": "customer_*_name"
    }
  }
}



# 날짜/시간 검색은 보통 현재(now)를 기준으로 하는 경우가 많기 때문에 현재를 기준으로 범위를 지정할 수 있다.
# 현재를 의미하는 "now"에다가 y(년), M(월), w(주), d(일), h(시), m(분), s(초)를 "+", "-" 연산을 이용해서 범위를 지정할 수 있다.
# "now": 현재 시각
# "now+1d": 현재 시각 + 1일
# "now+1h+30m+15s": 현재 시각 + 1시, 30분, 15초
# "2024-06-14||+1w": 2024-06-14 + 1주

# "gte" 크거나 같다
# "2024-06-01||+1w" 2024년 6월 1일에 일주일 후에 데이터를 검색
GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "2024-06-01||+1w"
      }
    }
  }
}


# 2024-07-01 부터 2024-08-01 사이의 데이터를 검색
GET kibana_sample_data_flights/_search
{
  "_source": ["timestamp"],
  "query": {
    "range": {
      "timestamp": {
        "gte": "2024-07-01",
        "lte": "2024-08-01"
      }
    }
  }
}


# 범위 데이터
# 정수형 범위(integer_range, long_range)
# 실수형 범위(float_range, double_range)
# ip 주소 범위(ip_range)
# 날짜 범위(date_range)

# 날짜 / 시간 범위 타입을 가지는 인덱스를 생성
PUT range_type_test1
{
  "mappings": {
    "properties": {
      "test_date": {
        "type": "date_range"
      }
    }
  }
}



# 하나의 날짜를 저장하는 도큐먼트 생성
PUT range_type_test1/_doc/1
{
  "test_date" : "2024-06-01"
}
# 위의 코드는 기본적은 date는 위의 코드로 저장이 가능하지만
   범위 데이트 타입은 위 처럼 작성하면 에러 발생
# 범위 연산자 lt, gt, gte, lte 파라미터를 사용해서 같이 데이터를 입력해야함

PUT range_type_test1/_doc/1
{
  "test_date": {
    "gte": "2024-06-01"
  }
}

PUT range_type_test1/_doc/2
{
 "test_date"  : {
    "gte" : "2024-07-01",
    "lte" : "2024-08-01"
       } 
}