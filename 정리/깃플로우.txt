# GIT 브랜치 전략
#   - 여러 개발자가 하나의 저장소를 사용하는
#       환경에서 저장소를 효과적으로 사용할 
#        수 있도록 전략!

# main ,master
#  main브랜치는 실제 운영환경에 배포가능한 상태
#   dev 브랜치 다음에 배포할 것을 개발하는 브랜치

# 보조브랜치
#  피처브랜치(feature)
#  - 어떤 기능을 개발할 때 각각 피처들을 만들어서
#     개발 후 dev에 병합

# 릴리즈 브랜치(release)
#   - 배포 준비 단계에서 생성된다. QA나 버그 수정이
          진행 될 때 , 수정이 완료될 경우 main브랜치
            로 병합되고 최종 배포하고 dev에도 병합코드
            일관적으로 유지
      
# 핫픽스 브랜치(hotfix)
    - 운영 중에 발생한 긴급 버그들을 수정할 때 
          사용하는 브랜치

# spring multi module 
#   - 큰 프로젝트에서 여러 작은 기능 단위 나누어서
#        관리하려고 하는 방식 

#   - 각각의 모듈로 나눠놓으면 수정이나 확장
#        이 쉽고 서로 영향을 주지 않습니다.

#     - 중복 코드 줄이기!

# 모듈 프로젝트 생성시에 기본적으로 root프로젝트
#  src 없음!

# 기본적으로 rootProject 폴더 안에서 각각의
#  모듈을 추가하는 내용을 작성해야된다.
#  settings.gradle include '모듈명'


